version: '3.8'

services:
  # API Gateway - Entry point for all requests
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      - JWT_SECRET=your-super-secret-jwt-key
      - USER_SERVICE_URL=http://user-service:3001
      - CONTENT_SERVICE_URL=http://content-service:8000
      - PROGRESS_SERVICE_URL=http://progress-service:3021
    depends_on:
      - user-service
      - redis
    networks:
      - sharklearning-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api.sharklearning.local`)"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=3000"

  # User Service - Authentication and user management
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://sharklearning:password@postgres-users:5432/sharklearning_users
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
      - JWT_EXPIRES_IN=24h
    depends_on:
      - postgres-users
      - redis
    networks:
      - sharklearning-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Content Service - Course management and content
  content-service:
    build:
      context: ./services/content-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - DATABASE_URL=postgresql://sharklearning:password@postgres-courses:5432/sharklearning_courses
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - JWT_SECRET=your-super-secret-jwt-key
    depends_on:
      - postgres-courses
      - redis
    networks:
      - sharklearning-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Progress Service - Progress tracking and analytics
  progress-service:
    build:
      context: ./services/progress-service
      dockerfile: Dockerfile
    ports:
      - "3021:3021"
    environment:
      - NODE_ENV=development
      - PORT=3021
      - DATABASE_URL=postgresql://sharklearning:password@postgres-learning:5432/sharklearning_learning
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - CONTENT_SERVICE_URL=http://content-service:8000
    depends_on:
      - postgres-learning
      - redis
    networks:
      - sharklearning-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3021/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL for User Service
  postgres-users:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=sharklearning_users
      - POSTGRES_USER=sharklearning
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
      - ./database/init-scripts/users:/docker-entrypoint-initdb.d
    networks:
      - sharklearning-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sharklearning -d sharklearning_users"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Course Service
  postgres-courses:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=sharklearning_courses
      - POSTGRES_USER=sharklearning
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_courses_data:/var/lib/postgresql/data
      - ./database/init-scripts/courses:/docker-entrypoint-initdb.d
    networks:
      - sharklearning-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sharklearning -d sharklearning_courses"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Learning Service
  postgres-learning:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=sharklearning_learning
      - POSTGRES_USER=sharklearning
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_learning_data:/var/lib/postgresql/data
      - ./database/init-scripts/learning:/docker-entrypoint-initdb.d
    networks:
      - sharklearning-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sharklearning -d sharklearning_learning"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    networks:
      - sharklearning-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sharklearning-network
    depends_on:
      - api-gateway
      - user-service
      - content-service

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - sharklearning-network
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - sharklearning-network

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sharklearning-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - sharklearning-network

  # Nginx for load balancing and reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - sharklearning-network

  # Frontend Application (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3040:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_ENVIRONMENT=development
    depends_on:
      - api-gateway
    networks:
      - sharklearning-network
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public

volumes:
  postgres_users_data:
    driver: local
  postgres_courses_data:
    driver: local
  postgres_learning_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  sharklearning-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 