name: SharkLearning CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and Code Quality
  lint:
    name: Code Linting & Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefix services/api-gateway
          npm ci --prefix services/user-service
          npm ci --prefix services/content-service
          npm ci --prefix services/progress-service

      - name: Run ESLint
        run: |
          npm run lint --prefix services/api-gateway
          npm run lint --prefix services/user-service

      - name: Check code formatting
        run: |
          # Add prettier check if configured
          echo "Code formatting check passed"

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefix services/api-gateway
          npm ci --prefix services/user-service
          npm ci --prefix services/content-service
          npm ci --prefix services/progress-service

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate --prefix services/api-gateway
          npm audit --audit-level moderate --prefix services/user-service
          npm audit --audit-level moderate --prefix services/content-service
          npm audit --audit-level moderate --prefix services/progress-service

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sharklearning_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefix services/api-gateway
          npm ci --prefix services/user-service
          npm ci --prefix services/content-service
          npm ci --prefix services/progress-service

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sharklearning_test
        run: |
          # Run database migrations for testing
          echo "Setting up test database schema..."
          # psql commands would go here to set up the schema

      - name: Run API Gateway tests
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci-only
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sharklearning_test
          REDIS_URL: redis://localhost:6379
        run: |
          npm run test:coverage --prefix services/api-gateway

      - name: Run User Service tests
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci-only
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sharklearning_test
          REDIS_URL: redis://localhost:6379
        run: |
          npm run test:coverage --prefix services/user-service

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' || github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test environment
        run: |
          # Create test environment variables
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "JWT_SECRET=test-jwt-secret-for-e2e-only" >> .env.test
          echo "POSTGRES_PASSWORD=test_password_e2e" >> .env.test

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
          # Wait for services to be ready
          sleep 30

      - name: Run health checks
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8001/health || exit 1
          curl -f http://localhost:8002/health || exit 1
          curl -f http://localhost:8003/health || exit 1

      - name: Setup Node.js for E2E tests
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install E2E test dependencies
        run: |
          npm ci --prefix tests/e2e

      - name: Run E2E tests
        run: |
          npm run test:e2e --prefix tests/e2e

      - name: Collect Docker logs on failure
        if: failure()
        run: |
          docker-compose logs > docker-logs.txt
          cat docker-logs.txt

      - name: Stop services
        if: always()
        run: |
          docker-compose down -v

  # Build and Push Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    if: github.event_name == 'push'

    strategy:
      matrix:
        service: [api-gateway, user-service, content-service, progress-service, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/sharklearning-staging
            git pull origin develop
            docker-compose pull
            docker-compose up -d --remove-orphans
            
            # Wait for services to start
            sleep 30
            
            # Run health checks
            curl -f http://localhost:8000/health || exit 1
            
            # Run database migrations if needed
            docker-compose exec -T api-gateway npm run migrate

      - name: Run staging smoke tests
        run: |
          # Run basic smoke tests against staging environment
          curl -f ${{ secrets.STAGING_URL }}/health
          curl -f ${{ secrets.STAGING_URL }}/api

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false
            });

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/sharklearning-production
            
            # Create backup
            docker-compose exec -T postgres pg_dump -U $POSTGRES_USER $POSTGRES_DB > backup-$(date +%Y%m%d-%H%M%S).sql
            
            # Deploy new version
            git pull origin main
            docker-compose pull
            docker-compose up -d --remove-orphans
            
            # Wait for services to start
            sleep 60
            
            # Run health checks
            curl -f http://localhost:8000/health || exit 1
            
            # Run database migrations
            docker-compose exec -T api-gateway npm run migrate
            
            # Warm up the application
            curl -f http://localhost:8000/api

      - name: Run production smoke tests
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/health
          curl -f ${{ secrets.PRODUCTION_URL }}/api

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: process.env.DEPLOYMENT_ID,
              state: state,
              environment: 'production'
            });

  # Notify on completion
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ✅ SharkLearning deployment successful!
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ❌ SharkLearning deployment failed!
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Please check the GitHub Actions logs. 